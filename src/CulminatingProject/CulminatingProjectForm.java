/*
 * Angus Henry
 * CulminatingProjectForm.java
 * This program provides a comparision of battles. 
 * 06/06/ 2018
 */

package CulminatingProject;
import java.util.*;
/**
 *
 * @author anhen3335
 */
public class CulminatingProjectForm extends javax.swing.JFrame {
    // Declaring all the Arrays
ArrayList <String> Datesstart = new ArrayList();
ArrayList <String> Datesend = new ArrayList();
ArrayList <String> Victor = new ArrayList();
ArrayList <String> LeadersGood = new ArrayList();
ArrayList <String> LeadersEvil = new ArrayList ();
ArrayList <Integer> CasualtiesGood = new ArrayList();
ArrayList <Integer> CasualtiesEvil = new ArrayList();
ArrayList <String> BelligerentsGood = new ArrayList();
ArrayList <String> BelligerentsEvil = new ArrayList();
ArrayList <String> Battles = new ArrayList();


    /**
     * Creates new form CulminatingProjectForm
     */
    public CulminatingProjectForm() {
        //setButtons
        initComponents();
        buttonCaen.setEnabled(false);
        buttonEl.setEnabled(false);
        buttonbulge.setEnabled(false);
        buttonCompare.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textBattle = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        textCompare = new javax.swing.JTextArea();
        labelTitle = new javax.swing.JLabel();
        buttonCompare = new javax.swing.JButton();
        buttonCaen = new javax.swing.JButton();
        buttonEl = new javax.swing.JButton();
        buttonbulge = new javax.swing.JButton();
        buttonStart = new javax.swing.JButton();
        labelExplain = new javax.swing.JLabel();
        buttonQUizstart = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        textExplain = new javax.swing.JTextArea();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textBattle.setEditable(false);
        textBattle.setColumns(20);
        textBattle.setRows(5);
        jScrollPane1.setViewportView(textBattle);

        textCompare.setEditable(false);
        textCompare.setColumns(20);
        textCompare.setRows(5);
        jScrollPane3.setViewportView(textCompare);

        labelTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labelTitle.setText("WW2 Battle Comparison");

        buttonCompare.setText("Compare All Battles");
        buttonCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCompareActionPerformed(evt);
            }
        });

        buttonCaen.setText("Caen");
        buttonCaen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCaenActionPerformed(evt);
            }
        });

        buttonEl.setText("El Alamein");
        buttonEl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonElActionPerformed(evt);
            }
        });

        buttonbulge.setText("Bulge");
        buttonbulge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonbulgeActionPerformed(evt);
            }
        });

        buttonStart.setText("Start");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        labelExplain.setText("Press start to begin");

        buttonQUizstart.setText("Start Quiz");
        buttonQUizstart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonQUizstartActionPerformed(evt);
            }
        });

        textExplain.setColumns(20);
        textExplain.setRows(5);
        jScrollPane4.setViewportView(textExplain);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116)
                        .addComponent(buttonQUizstart)
                        .addGap(57, 57, 57))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(labelExplain)
                        .addGap(236, 236, 236))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(labelTitle)
                        .addGap(143, 143, 143))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(buttonCaen)
                                .addGap(44, 44, 44)
                                .addComponent(buttonEl)
                                .addGap(57, 57, 57)
                                .addComponent(buttonbulge)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(buttonCompare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(labelExplain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonStart)
                    .addComponent(buttonQUizstart))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCompare)
                    .addComponent(buttonCaen)
                    .addComponent(buttonEl)
                    .addComponent(buttonbulge))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCompareActionPerformed
       // Decide what needs to be presented in the compare text area
        textCompare.setText ("");
        textCompare.append ("Most overall casualties: "  + battle("0") + " (" +totalcas(0) + ")" +"\n");
        textCompare.append ("Most Axis casualties: " + battle("1") +" (" + Axiscas(0) + ")" + "\n");
        textCompare.append ("Most Allied casualties: " + battle ("2") + " (" +Alliesacs(0) + ")" + "\n");
        textCompare.append ("Leaders with most battles:" + "\n");
        textCompare.append ("-Axis: " + mostAxis("0") + "\n");
        textCompare.append ("-Allies: " + mostAllies("0") + "\n");
        textCompare.append ("Nations that participated in the most battles:" + "\n");
        textCompare.append ("-Allies:" + parpticipateAllies("0") + "\n");
        textCompare.append ("-Axis:" + parpticipateAxis("0") + "\n");
        
    }//GEN-LAST:event_buttonCompareActionPerformed
/**
     * This method calculates the total Casualties.
     * return big
     * param big,test
     */
    public int totalcas (int check){
    int big = check;
    int test;
    for (int i = 0; i  < CasualtiesGood.size(); i ++){
        test = CasualtiesEvil.get(i) +CasualtiesGood.get(i);
        if (big < test ){
          big = test;
        }
    }
   return big;
}
/**
     * This method tells us which battle had the most Casualties.
     * return  Battles.get(count);
     * param big,test, count, checker
     */
public String battle (String check){
     int big = 0;
     int checker  = Integer.parseInt(check);
    int test;
    int count = 0;
    for (int i = 0; i  < CasualtiesGood.size(); i ++){
        test = CasualtiesEvil.get(i) +CasualtiesGood.get(i);
       if (checker == 0){
        if (big < test ){
          big = test;
          count = i;
        }
       }
       else if (checker == 1){
           test = CasualtiesEvil.get(i);
          if (big < test ){
          big = test;
          count = i;
        } 
       }
          else if (checker == 2){
                test = CasualtiesGood.get(i);
          if (big < test ){
          big = test;
          count = i;
          }
       }
    }
    return Battles.get(count);
}
   /**
     * This method calculates the total Casualties for the Axis.
     * return big
     * param big,test
     */         
public int Axiscas (Integer check){
      int big = check;
    int test;
    for (int i = 0; i  < CasualtiesEvil.size(); i ++){
        test = CasualtiesEvil.get(i);
        if (big < test ){
          big = test;
        }
    }
    return big;
}
/**
     * This method calculates the total Casualties for the Allies.
     * return big
     * param big,test
     */
public int Alliesacs (Integer check){
       int big = check;
    int test;
    for (int i = 0; i  < CasualtiesGood.size(); i ++){
        test = CasualtiesGood.get(i);
        if (big < test ){
          big = test;
        }
    }
    return big;
}
/**
     * This method checks which Axis leader participated in the most battles.
     * return LeadersEvil.get(count);
     * param once, count
     */
public String mostAxis (String check){
    int once = 0;
    int count = 0;
    for (int i = 0; i  < LeadersEvil.size(); i ++){
        if (once == 0){
            if (LeadersEvil.get(i) == LeadersEvil.get(i)){
                count = 0; 
                once ++;
            }
            else
            {
                 if (LeadersEvil.get(i) == LeadersEvil.get(count)){
                count = i; 
            }
            }
            
        }
    }
    return LeadersEvil.get(count);
}
/**
     * This method checks which Allies leader participated in the most battles.
     * return LeadersGood.get(count);
     * param once, count
     */
public String mostAllies (String check){
    int once = 0;
    int count = 0;
    for (int i = 0; i  < LeadersGood.size(); i ++){
        if (once == 0){
            if (LeadersGood.get(i) == LeadersGood.get(i)){
                count = 0; 
                once ++;
            }
            else
            {
                 if (LeadersGood.get(i) == LeadersGood.get(count)){
                count = i; 
            }
            }
            
        }
    }
    return LeadersGood.get(count);
    /**
     * This method checks which Allied nation took part in the most battles.
     * return LeadersGood.get(count);
     * param once, count
     */
}
public String parpticipateAllies (String check){
       int once = 0;
    int count = 0;
    for (int i = 0; i  < BelligerentsGood.size(); i ++){
        if (once == 0){
            if (BelligerentsGood.get(i) == BelligerentsGood.get(i)){
                count = 0; 
                once ++;
            }
        }
            else
            {
                 if (BelligerentsGood.get(i) == BelligerentsGood.get(count)){
                count = i; 
            }
            }
            
        }
        return BelligerentsGood.get(count);
}
 /**
     * This method checks which Axis nation took part in the most battles.
     * return LeadersEvil.get(count);
     * param once, count
     */
public String parpticipateAxis (String check){
       int once = 0;
    int count = 0;
    for (int i = 0; i  < BelligerentsEvil.size(); i ++){
        if (once == 0){
            if (BelligerentsEvil.get(i) == BelligerentsEvil.get(i)){
                count = 0; 
                once ++;
            }
        }
            else
            {
                 if (BelligerentsEvil.get(i) == BelligerentsEvil.get(count)){
                count = i; 
            }
            }
            
        }
        return BelligerentsEvil.get(count);
}
    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
       // adds all information to the Arrays
       Collections.addAll(Datesstart, "6 June 1944", "1 July 1942","16 Dec 1944");
       Collections.addAll (Datesend, "6 August 1944", "27 July 1942", "25 Jan 1945");
       Collections.addAll (Victor, "Allies", "Stalemate", "Axis");
       Collections.addAll (LeadersGood, "Bernard Montgomery (UK)", "Miles Dempsey (UK)", "Claude Auchinleck (UK)", " Dwight D. Eisenhower (US)", "Omar Bradley (US)", "Courtney Hodges (US)", "George S. Patton (US)" +"Bernard Montgomery (UK)" );
       Collections.addAll (LeadersEvil, "Erwin Rommel(Ger)", "Friedrich Dollmann(Ger)", "Paul Hausser(Ger)", "Ettore Bastico(Italy)" , "Walter Model(Ger)", "Gerd von Rundstedt(Ger)", "Hasso von Manteuffel(Ger)", "Sepp Dietrich(Ger)", "Erich Brandenberger(Ger)" + "Erwin Rommel(Ger)");
       Collections.addAll (CasualtiesGood, 50539, 13250, 146000);
       Collections.addAll (CasualtiesEvil, 200000, 17000, 125000);
       Collections.addAll (BelligerentsGood, "United Kingdom", "Canada", "United States", "Australia", "British Raj", "New Zealend", "France", "Belgium","Luxembourg", "South Africa","United Kingdom","United Kingdom");
       Collections.addAll (BelligerentsEvil, "Nazi Germany", "Kingdom of Italy","Nazi Germany","Nazi Germany");
       Collections.addAll (Battles, "Caen", "First Battle of El Alamein", "Battle of the Bulge");
        buttonStart.setEnabled(false);
        buttonCaen.setEnabled(true);
        buttonEl.setEnabled(true);
        buttonbulge.setEnabled(true);
        buttonCompare.setEnabled(true);
    }//GEN-LAST:event_buttonStartActionPerformed

    private void buttonCaenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCaenActionPerformed
       // sets texts area to have all teh information on the battle of Caen
        textBattle.setText("");
        textBattle.setText("***Caen***" + "\n");
        textBattle.append ("Belligerents: " + "\n");
        textBattle.append ("-Axis: " + EvilBelligerents("0") + "\n");
        textBattle.append ("-Allied: " + GoodBelligerents("0") + "," + GoodBelligerents("1") + "\n");
        textBattle.append ("Casualties:" + "\n");
        textBattle.append ("-Axis: " + EvilCasuelties(0) + " (This is an estimate, the original number was lost)" +"\n");
        textBattle.append ("-Allies: " + GoodCasuelties(0) + "\n");
        textBattle.append ("Leaders: " + "\n");
        textBattle.append ("-Axis: " + EvilLeader("0") + ", " + EvilLeader("1") + ", " + EvilLeader("2") + "\n");
        textBattle.append ("-Allies: " + GoodLeaders("0") + ", " + GoodLeaders("1") + "\n");
        textBattle.append ("Dates:" + "\n");
        textBattle.append ("-Started: " + Start("0") + "\n");
        textBattle.append ("-Ended: " + stop("0") + "\n");
        textBattle.append ("Victors: " + "\n");
        textBattle.append ( "-" + winner("0"));
        textExplain.setText(" ");
        textExplain.append("The importance of this battle was because the city was an \n important junction of roads needed for the allied forces at the \n D-Day landings was vital for the German supplies due to this \n junction. With the capture of the city the allies were able to hinder \n the German supply lines, capture the last German stronghold \n opposing the troops at D-Day and were able to secure a vital \n logistical center. The fight itself was very difficult because the \n Germans were vastly outnumbering the Allies and dug into \n fortified positions but the Allies managed to pull through due to \n the surprise of the Normandy landings, confusion in German \n high command and the split attention of the German reserves. ");
        
        
    }//GEN-LAST:event_buttonCaenActionPerformed

    private void buttonElActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonElActionPerformed
         // sets texts area to have all teh information on the battle of El Alamein
        textBattle.setText("");
        textBattle.setText("***First Battle of El Alamein***" + "\n");
        textBattle.append ("Belligerents: " + "\n");
        textBattle.append ("-Axis: " + EvilBelligerents("0") +  " "+ EvilBelligerents("1") +"\n");
        textBattle.append ("-Allied: " + GoodBelligerents("0") + ", " + GoodBelligerents("3") + ", " + GoodBelligerents("4") + ", " +GoodBelligerents("5") +", " + GoodBelligerents("9")+"\n");
        textBattle.append ("Casualties:" + "\n");
        textBattle.append ("-Axis: " + EvilCasuelties(1) + "\n");
        textBattle.append ("-Allies: " + GoodCasuelties(1) + "\n");
        textBattle.append ("Leaders: " + "\n");
        textBattle.append ("-Axis: " + EvilLeader("0") + ", " + EvilLeader("3") + "\n");
        textBattle.append ("-Allies: " + GoodLeaders("2") + "\n");
        textBattle.append ("Dates:" + "\n");
        textBattle.append ("-Started: " + Start("1") + "\n");
        textBattle.append ("-Ended: " + stop("1") + "\n");
        textBattle.append ("Victors: " + "\n");
        textBattle.append ( "-" + winner("1"));
        textExplain.setText("");
        textExplain.append("This battle was important because the city of El Alamein was close \nenough Alexandria, the United Kingdom base of operations in Egypt \nand a vital port, and the suez canal, vital for british shipping to their \nasian and oceanic colony. After Rommel's quick crossing of \nnorthern Africa the allies were desperate and needed to stop the \nadvance and decided to hold the city, the city was quickly \nsurrounded and put under siege. The Allied forces were not \nexpected to hold the city for long against superior axis force but \nmanaged to fight them to a standstill denying the axis the port \nneeded to supply to supply their assault against Alexandria\nessentially halting Rommel's lightning campaign. ");
    }//GEN-LAST:event_buttonElActionPerformed

    private void buttonbulgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonbulgeActionPerformed
       // sets texts area to have all teh information on the battle of the Bulge
        textBattle.setText("");
        textBattle.setText("***Battle of the Bulge***" + "\n");
        textBattle.append ("Belligerents: " + "\n");
        textBattle.append ("-Axis: " + EvilBelligerents("0") + "\n");
        textBattle.append ("-Allied: " + GoodBelligerents("0") + "," + GoodBelligerents("1") + ", " +GoodBelligerents("2") + ", " +GoodBelligerents("6") + ", " +GoodBelligerents("7") + ", " +GoodBelligerents("8") + "\n");
        textBattle.append ("Casualties:" + "\n");
        textBattle.append ("-Axis: " + EvilCasuelties(2) + "\n");
        textBattle.append ("-Allies: " + GoodCasuelties(2) + "\n");
        textBattle.append ("Leaders: " + "\n");
        textBattle.append ("-Axis: " + EvilLeader("4") + ", " + EvilLeader("5") + ", " + EvilLeader("6") + ", " + EvilLeader("7") + ", " + EvilLeader("8") + "\n");
        textBattle.append ("-Allies: " + GoodLeaders("0") + ", " + GoodLeaders("3") + ", " + GoodLeaders("4") + ", " + GoodLeaders("5") + ", " + GoodLeaders("6") + "\n");
        textBattle.append ("Dates:" + "\n");
        textBattle.append ("-Started: " + Start("2") + "\n");
        textBattle.append ("-Ended: " + stop("2") + "\n");
        textBattle.append ("Victors: " + "\n");
        textBattle.append ( "-" + winner("0"));
        textExplain.setText("");
        textExplain.append("This battle was the final major action of Nazi Germany on the western\nfront trying to recreate the success the of the of their initial push into\nFrance through the ardennes with tank by attempting the same tactic\nin the same place. The battle was initially success taking the allied\nforces by surprise but quickly fell apart due to the large number of allied\nforces, the lack of supplies and the allied forces being able to cut the\nGermans off from the sea preventing a encirclement. After this final\noffensive the Germans on the western front the Germans were put on\nthe backfoot and then resistance collapsed completely whenthe allies\ncrossed the Rhine.");
    }//GEN-LAST:event_buttonbulgeActionPerformed

    private void buttonQUizstartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonQUizstartActionPerformed
        this.setVisible(false);
        new Quiz().setVisible(true);
    }//GEN-LAST:event_buttonQUizstartActionPerformed
    /**
     *This method gets which Axis nation was in the battle
     * return BelligerentsEvil.get(i);
     * param i
     */
    public String EvilBelligerents (String check){
        int i;
        if (check == "0"){
          i = 0;  
        }
        else if (check == "1") {
           i =1;
        }
        else {
            i = -1;
        }
         return BelligerentsEvil.get(i);
    }
      /**
     *This method gets which Allied nation was in the battle
     * return BelligerentsGood.get(i);
     * param i
     */
    public String GoodBelligerents (String check){
        int i;
        if (check == "0"){
            i = 0;
        }
        else if (check == "1"){
            i = 1;
        }
        else if (check == "2"){
            i = 2;
        }
        else if (check == "3"){
            i =3;
        }
        else if (check == "4"){
            i = 4;
        }
        else if (check == "5"){
            i = 5;
        }
        else if (check == "6"){
            i = 6;
        }
        else if (check == "7"){
            i = 7;
        }
        else if (check == "8"){
            i = 8;
        }
         else if (check == "9"){
            i = 9;
        }
        else{
            i = -1;
        }
        return BelligerentsGood.get (i);
    }
     /**
     *This method gets how many casuelties the Axis nations took in the battle.
     * return BelligerentsEvil.get(i);
     * param i
     */
    public Integer EvilCasuelties (Integer check){
        int i;
        if (check == 0){
            i = 0;
        }
        else if (check == 1){
            i = 1;
        }
        else if (check == 2){
            i = 2;
        }
        else {
            i = -1;
        }
        return CasualtiesEvil.get (i);
    }
     /**
     *This method gets how many casuelties the Allied nations took in the battle.
     * return BelligerentsGood.get(i);
     * param i
     */
     public Integer GoodCasuelties (Integer check){
        int i;
        if (check == 0){
            i = 0;
        }
        else if (check == 1){
            i = 1;
        }
        else if (check == 2){
            i = 2;
        }
        else {
            i = -1;
        }
        return CasualtiesGood.get (i);
    }
      /**
     *This method finds when the battle starts.
     * return Datesstart.get (i);
     * param i
     */
     public String Start (String check){
        int i;
        if (check == "0"){
            i = 0;
        }
        else if (check == "1"){
            i = 1;
        }
        else if (check == "2"){
            i = 2;
        }
        else {
            i = -1;
        }
        return Datesstart.get (i);
    }
       /**
     *This method finds when the battle Ends.
     * return Datesend.get (i);
     * param i
     */
     public String stop (String check){
        int i;
        if (check == "0"){
            i = 0;
        }
        else if (check == "1"){
            i = 1;
        }
        else if (check == "2"){
            i = 2;
        }
        else {
            i = -1;
        }
        return Datesend.get (i);
    }
       /**
     *This method finds who won the battle
     * return Victor.get (i);
     * param i
     */
     public String winner (String check){
        int i;
        if (check == "0"){
            i = 0;
        }
        else if (check == "1"){
            i = 1;
        }
        else if (check == "2"){
            i = 2;
        }
        else {
            i = -1;
        }
        return Victor.get (i);
    }
     /**
     *This method finds which Axis leaders were leading the battle
     * return LeadersEvil.get (i);
     * param i
     */
     public String EvilLeader (String check){
           int i;
        if (check == "0"){
            i = 0;
        }
        else if (check == "1"){
            i = 1;
        }
        else if (check == "2"){
            i = 2;
        }
        else if (check == "3"){
            i =3;
        }
        else if (check == "4"){
            i = 4;
        }
        else if (check == "5"){
            i = 5;
        }
        else if (check == "6"){
            i = 6;
        }
        else if (check == "7"){
            i = 7;
        }
        else if (check == "8"){
            i = 8;
        }
        else{
            i = -1;
        }
        return LeadersEvil.get (i);
     }
      /**
     *This method finds which Allied leaders were leading the battle
     * return LeadersEvil.get (i);
     * param i
     */
     public String GoodLeaders(String check){
        int i;
        if (check == "0"){
            i = 0;
        }
        else if (check == "1"){
            i = 1;
        }
        else if (check == "2"){
            i = 2;
        }
        else if (check == "3"){
            i =3;
        }
        else if (check == "4"){
            i = 4;
        }
        else if (check == "5"){
            i = 5;
        }
        else if (check == "6"){
            i = 6;
        }
        else{
            i = -1;
        }
        return LeadersGood.get (i);
    }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CulminatingProjectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CulminatingProjectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CulminatingProjectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CulminatingProjectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CulminatingProjectForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCaen;
    private javax.swing.JButton buttonCompare;
    private javax.swing.JButton buttonEl;
    private javax.swing.JButton buttonQUizstart;
    private javax.swing.JButton buttonStart;
    private javax.swing.JButton buttonbulge;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel labelExplain;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTextArea textBattle;
    private javax.swing.JTextArea textCompare;
    private javax.swing.JTextArea textExplain;
    // End of variables declaration//GEN-END:variables
}